import fs from 'fs';

// writeFileSync 写入文件，如果文件不存在则创建文件
/**
 *  第一个参数 文件名称
 * 第二个参数 内容
 * 第三个参数 options
 * encoding: 'utf8' // 编码格式
 * mode: 0o666 // 文件读写权限
 * flag: 'w' // 写入模式  'a' 追加模式
 *  a 打开文件用于追加。如果文件不存在，则创建该文件。
 *  ax 类似于a ，但如果文件存在，则失败。
 *  a+ 打开文件用于读取和追加。如果文件不存在，则创建该文件。
 *  ax+ 类似于 a+ ，但如果文件存在，则失败。
 *  as 以同步模式打开文件进行追加。如果文件不存在，则创建该文件。
 *  as+ 以同步模式打开文件进行读取和追加。如果文件不存在，则创建该文件。
 *  r 打开文件用于读取。如果文件不存在，则发生异常。
 *  r+ 打开文件用于读取和写入。如果文件不存在，则发生异常。
 *  rs 以同步模式打开文件进行读取。指示操作系统绕过本地文件系统缓存。
 *    ---- 在 NFS 挂载上打开文件，因为它允许跳过可能过时的本地缓存。 它对 I/O 性能有非常实际的影响，因此除非需要，否则不建议使用此标志。
 *  w 打开文件用于写入。如果文件不存在，则创建该文件。如果文件已存在，则将其内容截断为零长度。
 *  wx 类似于 w ，但如果文件存在，则失败。
 *  w+ 打开文件用于读取和写入。如果文件不存在，则创建该文件。如果文件已存在，则将其内容截断为零长度。
 *  wx+ 类似于 w+ ，但如果文件存在，则失败。
 * * */

fs.writeFileSync('input.txt', '\nHello, World!', {
    encoding: 'utf8',
    flag: 'a' // append模式
});

// 创建一个可写流
// createWriteStream 方法用于创建一个可写的文件流，用于将数据写入文件系统中的文件。
// 创建一个可写流 打开一个通道，可以一直写入数据，用于处理大量的数据写入，写入完成之后调用end 关闭可写流，监听finish 事件 写入完成


const streamData = [
    'This is line 1.\n',
    'This is line 2.\n',
    'This is line 3.\n'
]
let writeStream = fs.createWriteStream('stream.txt');
for (const line of streamData) {
    writeStream.write(line, 'utf8');
}
writeStream.end();

writeStream.on('finish',()=>{
    console.log('写入完成')
})

// 硬链接 和 软连接
// 硬链接: 指向文件数据的引用，多个硬链接指向同一个数据块，删除一个硬链接不会影响其他硬链接
// 软连接: 指向文件路径的引用，类似于快捷方式，删除原文件会导致软连接失效

/**
 * 硬连接的作用
 *  1. 文件共享 : 多个硬链接可以指向同一个文件数据，实现文件共享，节省存储空间。
 * 2. 数据冗余 : 通过创建硬链接，可以实现数据冗余，提高数据的可靠性。
 * 3. 版本控制 : 可以使用硬链接来实现简单的版本控制，保留文件的多个版本。
 * 4. 便捷性 : 硬链接可以为文件提供多个访问路径，方便用户根据不同需求访问同一文件。
 *  5. 防止误删除 : 删除一个硬链接不会删除文件数据，只有当所有硬链接都被删除后，文件数据才会被真正删除，从而防止误删除文件数据。
 *  6. 提高性能 : 由于硬链接直接指向文件数据，访问硬链接的性能与访问原文件相同，避免了路径解析的开销。
 *  7. 跨目录引用 : 硬链接可以在同一文件系统内的不同目录中创建，方便文件的组织和管理。
 *  8. 快速恢复 : 在文件损坏或误删除的情况下，可以通过硬链接快速恢复文件数据。
 *  9. 简化备份 : 使用硬链接可以简化备份过程，避免重复存储相同的数据，提高备份效率。
 *  10. 文件改名 : 通过创建硬链接，可以实现文件的改名操作，而不需要实际移动文件数据，提高操作效率。
 * 软连接的作用
 *  1. 软连接可以创建指向目录的链接，方便目录的组织和管理。
 * 2. 软连接可以跨文件系统创建，允许在不同的文件系统之间建立链接。
 * 3. 软连接可以指向不存在的文件或目录，提供更大的灵活性。
 * 4. 软连接可以简化路径访问，提供更短或更易记的路径。
 * 5. 软连接可以用于实现别名，方便用户根据不同需求访问同一文件或目录。
 * 6. 软连接可以用于测试和开发环境，方便切换不同版本的文件或目录。
 * 7. 软连接可以提高系统的可维护性，便于文件和目录的重组和调整。
 * 8. 软连接可以用于实现虚拟目录结构，提供更好的用户体验。
 * 9. 软连接可以帮助解决路径长度限制问题，提供更灵活的路径管理。
 * 10. 软连接可以用于实现动态链接，根据不同条件指向不同的文件或目录。
 */

// 创建硬链接
fs.linkSync('input.txt', 'input_hardlink.txt');

// 创建软连接
fs.symlinkSync('input.txt', 'input_symlink.txt');
